{"version":3,"sources":["ajax.js","cpu.js","memory.js","App.js","serviceWorker.js","index.js"],"names":["post","a","user","name","axios","response","console","log","get","del","delete","relativePost","relativeGet","relativeDel","calculateId","calculate","setInterval","iterations","multiplier","primes","i","candidate","Math","random","isPrime","c","sqrt","push","calculatePrimes","stopCalculate","clearInterval","x","growMemory","Array","join","jsApi","JSBridge","send","timing","printSimpleTable","stats","then","d","catch","e","sendFPS","start","fps","throwError","Error","toggleDevMode","App","useState","showPic","togglePic","useEffect","document","getElementById","addEventListener","className","id","onClick","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.ed58cbb2.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport async function post() {\n  let user = {\n    name: '测试',\n  };\n  \n  let response = await axios.post('https://serverless-demo.vercel.app/api/post', user);\n\n  console.log(response)\n}\n\nexport async function get() {\n  let response = await axios.get('https://serverless-demo.vercel.app/api/get');\n\n  console.log(response)\n}\n\nexport async function del() {\n  \n  let response = await axios.delete('https://serverless-demo.vercel.app/api/method');\n\n  console.log(response)\n}\n\nexport async function relativePost() {\n  let user = {\n    name: '测试',\n  };\n  \n  let response = await axios.post('/api/post', user);\n\n  console.log(response)\n}\n\nexport async function relativeGet() {\n  let response = await axios.get('/api/get');\n\n  console.log(response)\n}\n\nexport async function relativeDel() {\n  let response = await axios.delete('/api/method');\n\n  console.log(response)\n}","let calculateId;\n\nexport function calculate() {\n  const iterations = 50;\n  const multiplier = 1000000000;\n  \n  function calculatePrimes(iterations, multiplier) {\n    var primes = [];\n    for (var i = 0; i < iterations; i++) {\n      var candidate = i * (multiplier * Math.random());\n      var isPrime = true;\n      for (var c = 2; c <= Math.sqrt(candidate); ++c) {\n        if (candidate % c === 0) {\n            // not prime\n            isPrime = false;\n            break;\n         }\n      }\n      if (isPrime) {\n        primes.push(candidate);\n      }\n    }\n    return primes;\n  }\n  \n  function doPointlessComputationsWithBlocking() {\n    var primes = calculatePrimes(iterations, multiplier);\n    console.log('doPointlessComputationsWithBlocking')\n  }\n\n  calculateId = setInterval(doPointlessComputationsWithBlocking, 100)\n}\n\nexport function stopCalculate() {\n  clearInterval(calculateId)\n}","\nvar x = [];\n\nexport function growMemory() {\n  setInterval(() => {\n    console.log('内存增加')\n    x.push(new Array(10000000).join('a'));\n  }, 200)\n}","import React, { useEffect, useState } from 'react';\nimport JSBridge from 'statsjsbridge';\nimport timing from 'timing.js'\nimport { del, get, post, relativeDel, relativeGet, relativePost } from './ajax';\nimport './App.css';\nimport { calculate, stopCalculate } from './cpu';\nimport { growMemory } from './memory';\n\n\nconst jsApi = new JSBridge();\njsApi.toggleDevMode()\n\nfunction send() {\n  timing.printSimpleTable();\n  jsApi.stats().then(d => console.log(d)).catch(e => console.log(e));\n}\n\nfunction sendFPS(start) {\n  jsApi.fps(start);\n}\n\nfunction throwError() {\n  throw new Error('Global Uncatch Error!!!');\n}\n\nfunction App() {\n  const [showPic, togglePic] = useState(false);\n\n  useEffect(() => {\n    document.getElementById('grow').addEventListener('click', growMemory);\n  }, [])\n\n  const downloadPic = () => {\n    togglePic(!showPic)\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <div id=\"container\" className=\"started\">\n        <div className=\"moving-box\"></div>\n      </div>\n\n        <button\n          className=\"App-link\"\n          onClick={send}\n        >\n          发送性能数据\n        </button>\n\n        <div className=\"btn-container\">\n          <button\n            className=\"App-link\"\n            onClick={() => sendFPS(true)}\n          >\n            发送FPS数据 Start\n          </button>\n\n          <button\n            className=\"App-link\"\n            onClick={() => sendFPS(false)}\n          >\n            发送FPS数据 Stop\n          </button>\n        </div>\n\n        <div className=\"btn-container\">\n          <button\n            className=\"App-link\"\n            onClick={calculate}\n          >\n            高CPU运算运算 Start\n          </button>\n          <button\n            className=\"App-link\"\n            onClick={stopCalculate}\n          >\n            高CPU运算运算 stop\n          </button>\n        </div>\n\n        <button\n          className=\"App-link\"\n          id=\"grow\"\n        >\n          高内存运算运算\n        </button>\n\n        <button\n          className=\"App-link\"\n          onClick={throwError}\n        >\n          发送全局Error\n        </button>\n\n        <div className=\"btn-container\">\n          <button\n            className=\"App-link\"\n            onClick={post}\n          >\n            绝对post\n          </button>\n\n          <button\n            className=\"App-link\"\n            onClick={get}\n          >\n            绝对get\n          </button>\n\n          <button\n            className=\"App-link\"\n            onClick={del}\n          >\n            绝对delete\n          </button>\n        </div>\n\n        <div className=\"btn-container\">\n          <button\n            className=\"App-link\"\n            onClick={relativePost}\n          >\n            相对post\n          </button>\n\n          <button\n            className=\"App-link\"\n            onClick={relativeGet}\n          >\n            相对get\n          </button>\n\n          <button\n            className=\"App-link\"\n            onClick={relativeDel}\n          >\n            相对delete\n          </button>\n        </div>\n        \n        <button\n            className=\"App-link\"\n            onClick={downloadPic}\n        >\n          下载大图\n        </button>\n        \n        { showPic && <img src='pic2.png' className=\"pic\"></img> }\n\n\n        <img src=\"logo192.png\" alt=\"加载失败\"></img>\n\n      </header>\n    </div>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}